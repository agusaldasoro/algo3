\section{Zombieland II}
\subsection{Descripci\'on de la problem\'atica}


El escenario con el que vamos a trabajar es una ciudad con \emph{n} calles horizontales y \emph{m} calles verticales. En esta ciudad se encuentran dispersos zombies, los mismos est\'an dispuestos en las calles (tanto en las verticales como en las horizontales) pero ninguno est\'a ubicado exactamente en alguna esquina. 

Contamos con \emph{s} soldados, los cuales se quieren movilizar desde una posici\'on inicial ($X_i$) hasta una posici\'on final ($X_f$) donde se encuentra el b\'unker.

Todos estos datos van a ser ingresados como par\'ametros de entrada.\\

Efectivamente, al encontrarse soldados con zombies se va a producir un enfrentamiento. Si la cantidad de soldados es mayor o igual a la cantidad de zombies, se exterminan los zombies de esa cuadra sin dejar ning\'un soldado muerto. 

En cambio, si la cantidad de zombies es mayor a la cantidad de soldados, se va a sufrir una baja de ($z-s$) soldados. De este modo, si $z-s\geq s$ toda la cuadrilla va a quedar eliminada impidiendo el avance con el recorrido. En caso contrario, se eliminan los zombies de esa cuadra perdiendo los $z-s$ soldados.

Esto implica el impedimento de recorrer un camino cuando $s=0$ (incluso cuando as\'i sea el par\'ametro de entrada) sin tener en cuenta la existencia o no de zombies en el trayecto restante.\\

Se busca hallar la manera de llegar desde $X_i$ hasta $X_f$ con la mayor cantidad de soldados sobrevivientes, si es posible. De haber m\'as de un camino que cumpla estas condiciones, se debe devolver s\'olo uno.\\

Se exige una cota de complejidad temporal de $\mathbf{O(s.n.m)}$.\\

\bigskip

Un caso espec\'ifico de la problem\'atica a tratar es el que detallamos a continuaci\'on.\\

Consideremos una ciudad con $n=3$ y $m=3$, de modo que se forma una ciudad cuadrada de cuatro manzanas en total. La cantidad de soldados inicial($s$) es 10 y se deben mover desde un extremo de la ciudad ($X_i$) hasta el otro ($X_f$) tal como indica la figura. En color verde se indica el camino \'optimo que debe ser devuelto al ejecutar el algoritmo.\\

  \begin{figure}[h!]
   \begin{center}
 	\includegraphics[scale=0.3]{imagenes/ej2/cuadras.png}
 	\caption{Ciudad de 3x3}
 	\label{ejemplitoCiudad}
   \end{center}
 \end{figure}

\newpage

Es claro observar que la cuadra donde la cantidad de zombies es $30$ no va a pertenecer al camino soluci\'on ya que al pasar por all\'i con la cantidad m\'axima de soldados (la cantidad inicial) no se efectuar\'an sobrevivientes. A continuaci\'on, el primer movimiento que pueden hacer es pasar por la cuadra con $11$ zombies, sufriendo la baja de un soldado.\\

Luego de este paso, contamos con una cantidad de $9$ soldados sobrevivientes por lo que resulta tambi\'en trivial esquivar la calle con $20$ zombies ya que no se puede salvar a ning\'un soldados de la cuadrilla. Por este motivo, se prosigue el camino por la cuadra con $5$ zombies, sin sufrir ninguna baja.\\

Al llegar a este momento, mantenemos la cantidad de soldados sobrevivientes en $9$. Si bien un camino m\'as corto en longitud ser\'ia pasar por la cuadra con $10$ zombies, no es el camino soluci\'on ya que al enfrentarse $9$ soldados con $10$ zombies se sufre una baja m\'as dejando al ej\'ercito con $8$ soldados. En cambio, se pasa por las cuadras de $9$, $7$ y $0$ zombies sin perder ningun hombre.\\

Al finalizar, s\'olo queda una cuadra posible que contiene a $10$ zombies tambi\'en. Luego de cruzar esta cuadra, la cantidad de soldados ser\'a $8$ y llegaremos a destino.



\newpage
\subsection{Resoluci\'on propuesta y justificaci\'on}

\textcolor{magenta}{[EZE] Leete esta seccion y corregila, que le tengo mis dudas. }Para modelar la problem\'atica planteada, utilizamos dos grafos.\\
\\

El \emph{primer grafo} (no dirigido) con el que vamos a tratar es el que almacena los datos de entrada -\texttt{ciudadInfestada}- (cantidad de zombies por cuadra), de modo que cada nodo es una esquina de la ciudad y cada eje tiene en su peso la cantidad de zombies que est\'an presentes en esa locaci\'on.\\
\\

El \emph{segundo grafo} \textcolor{red}{(dirigido)?} -\texttt{grafo}- lo vamos a ir construyendo, de modo que al finalizarlo tengamos calculada la soluci\'on.\\

Cada nodo de \texttt{grafo} va a contener la siguiente informaci\'on: cantidad de soldados vivos con la que se lleg\'o a esa posici\'on (\texttt{soldadosVivos}) y las coordenadas de su posici\'on: \texttt{i} y \texttt{j}.

Los ejes de nuestro \texttt{grafo} no van a contener ninguna informaci\'on extra, s\'olo indicar\'an movimientos desde un nodo a otro que sean posibles. Es decir, s\'olo va a haber una conexi\'on del nodo \emph{e} al nodo \emph{f} si en ese trayecto no se produjo la baja total de los soldados.\\

Por ejemplo, si consideramos el caso visto en la Secci\'on \ref{ejemplitoCiudad}, vamos a construir un grafo de la siguiente manera:

  \begin{figure}[h!]
   \begin{center}
 	\includegraphics[scale=0.4]{imagenes/ej2/todos.png}
   \end{center}
 \end{figure}
 
Donde los n\'umeros en negro que figuran sobre los ejes es la cantidad de zombies por esa cuadra, consultada en \texttt{ciudadInfestada}. Los nodos que permanecieron grises, o ni fueron consultados no van a formar parte de nuestro grafo.

As\'i mismo, se puede apreciar que para una misma esquina hay dos nodos distintos, ya que cambia la cantidad de soldados con la que se arrib\'o.\\

\newpage

En este caso, encontramos dos caminos para llegar al b\'unker con vida. De todos modos, queremos el que lo haga con mayor cantidad de sobrevivientes que es el camino azul.

   \begin{figure}[h!]
   \begin{center}
 	\includegraphics[scale=0.7]{imagenes/ej2/final.png}
   \end{center}
 \end{figure}

\bigskip

Lo primero que vamos a hacer es situarnos en la posici\'on inicial ($X_i = (inicioH, inicioV)$) y crear este nodo en \texttt{grafo}, de modo que \texttt{soldadosVivos} va a ser la cantidad de soldados inicial y las coordenadas van a ser \texttt{i=inicioH,j=inicioV}. 

Para continuar la creaci\'on de este \texttt{grafo}, lo vamos a recorrer mediante \textcolor{red}{BFS? o el otro?}. Es decir, vamos a conectar al nodo inicial con sus cuatro nodos vecinos (si los tiene) e indicar en ellos con cu\'antos soldados se arriba (en caso de ser menor o igual a 0, ese nodo no se agrega) y desde qu\'e posici\'on. De la misma manera, vamos a repetir el proceso para todos los nodos que sean agregados. De este modo, armamos todos los caminos posibles.

Al momento de avanzar de nodo, nos fijamos en el grafo \texttt{ciudadInfestada} la cantidad de zombies en esa cuadra.\\


\textcolor{magenta}{[EZE]Y si volvemos a pasar por una cuadra que ya pasamos y habiamos matado a todos los zombies y nos fijamos en la cantidad de zombies original? Explicar porque esto nunca pasa :)}\\

Para realizar este procedimiento, utilizamos una \texttt{cola} la cual nos va a indicar qu\'e nodos nos falta recorrer.

Comenzamos con el primer nodo, lo encolamos. Al desencolarlo lo marcamos como visitado y no s\'olo agregamos los nodos vecinos correspondientes al \texttt{grafo} sino que, los insertamos en la cola. A continuaci\'on, desencolamos el elemento siguiente, lo marcamos como visitado y agregamos los nodos vecinos correspondientes que no hayan sido visitados.

Repetimos este proceso hasta que la cola quede vac\'ia. Es importante destacar que no es lo mismo visitar al nodo de la posici\'on (\texttt{x,y}) con \texttt{soldadosVivos}=$s_1$ que el de la misma posici\'on con \texttt{soldadosVivos}=$s_2$. En cambio, si $s_1=s2$ no nos es de inter\'es diferenciar llegar a la misma posici\'on desde coordenadas previas anteriores distintas ya que se arriba con la misma cantidad de soldados sobrevivientes. \textcolor{red}{Esto creo que no quedo muy claro}\\

Una vez completo todo el \texttt{grafo}, basta verificar que exista al menos un nodo en la posici\'on $X_f = (bunkerH, bunkerV)$ para establecer que existe un camino donde sobrevive alg\'un soldado.

Para encontrar la cantidad de soldados m\'axima con la que se puede llegar a destino, lo que debemos hacer es recorrer todos los nodos de la posic\'on $X_f$ y localizar al que tenga la cantidad de \texttt{SoldadosVivos} menor. Esta va a ser la soluci\'on \'optima.

Por \'ultimo, para hallar el camino debemos hacer el proceso inverso. Como en cada nodo existente de \texttt{grafo} vamos a tener la coordenada anterior en la que se estaba para llegar all\'i, vamos accediendo secuencialmente. De esta manera, tenemos todas las posiciones (esquinas) por donde pas\'o la guardilla hasta llegar a destino.\\

\bigskip


Esta soluci\'on propuesta resuelve el problema porque considera todos los caminos posibles desde el punto inicial $X_i$. Es decir, recorre el grafo situ\'andose en un primer momento en este nodo por todos los caminos existentes. S\'olo se detiene cuando la cantidad de zombies es suficiente para destruir a todo el escuadr\'on. Sin embargo, todos los recorridos deben finalizar cuando se alcanza la posici\'on del bunker $X_f$.\\

De este modo, diagramamos todos los caminos posibles que conducen desde $X_i$ hasta $X_f$ dejando (al menos) un soldado con vida. Los caminos que se cortan antes de alcanzar la posici\'on del b\'unker no nos son de inter\'es.\\

Nos basta con encontrar si se arm\'o alg\'un nodo que sus coordenadas coincidan con $X_f$ para notar que el problema tiene soluci\'on. Para encontrar la soluci\'on que cumple ser la \'optima s\'olo debemos recorrer los nodos que existan con coordenadas $X_f$ y devolver el que tenga un valor de \texttt{soldadosVivos} mayor.\\
\\

Si existe soluci\'on, nos situamos en el nodo con la soluci\'on \'optima y desde all\'i reeconstruimos el camino que debimos recorrer. Es v\'alido aclarar que si existi\'o m\'as de una manera de llegar a un \emph{mismo} nodo no nos es de inter\'es diferenciarlas y s\'olo  nos vamos a quedar con una \textcolor{red}{No estoy segura ahora si con la ultima o la primera.} ya que cada nodo cuenta con la cantidad \texttt{soldadosVivos} en \'el y no existe una diferencia cualitativa entre caminos que no se vea reflejada ah\'i.\\

\bigskip





\subsubsection*{PseudoC\'odigo}

\IncMargin{1em}
\begin{algorithm}
\SetKwData{Left}{left}\SetKwData{This}{this}\SetKwData{Up}{up}
\SetKwFunction{Union}{Union}\SetKwFunction{FindCompress}{FindCompress}
\SetKwInOut{Input}{input}\SetKwInOut{Output}{output}
\Input{int $n$, $m$, $s$, $Ih$, $Iv$, $Bh$, $Bv$, grafo $ciudadInfestada$}
\BlankLine
\BlankLine
\emph{cola.push(Ih, Iv)}\;

\While{$!cola.vacia()$}{
\emph{$nodoActual \leftarrow cola.pop()$}\;
\emph{$nodoActual.marcar()$}\;
\For{$nodoVecino$ in $nodoActual.vecinos()$}{
	\If{Cantidad de Zombies en $grafo$ desde $nodoActual$ hasta $nodoVecino$ no mata a todos los $nodoActual$.\texttt{soldadosVivos}}{
		$nodoVecino$.\texttt{previo} $\leftarrow$ $nodoActual$\;
		\emph{cola.push($nodoVecino$)}\;
	}
}
}
	\emph{$nodoActual \leftarrow nodoFinal$}\;
\While{no llegue a $X_i$}{
	\emph{camino.push_front($nodoActual$)}\;
	$nodoActual \leftarrow nodoActual$.\texttt{previo}\;
}
\KwRet{cantidad m\'axima de \texttt{soldadosVivos} para la posici\'on de $nodoFinal$}\;



\caption{Zombieland II}%\label{algo_ej3}
\end{algorithm}\DecMargin{1em}

\newpage
\subsection{An\'alisis de la complejidad}

Los valores pasados por par\'ametro est\'an almacenados en el grafo \texttt{ciudadInfestada}, el cual est\'a representado mediante una matriz. Cada posici\'on de la matriz es una esquina de la ciudad y en la misma se indican la cantidad de zombies que hay en el trayecto hacia la esquina de la derecha y la cantidad que hay en el inferior. Con esta informaci\'on basta porque si se desea saber la cantidad de zombies existentes hacia la izquierda, basta con posicionarse en el valor de la matriz de esa posici\'on y mirar hacia la derecha. En el caso de los bordes, como no poseen cuadras a su derecha y/o hacia abajo se les asign\'o el valor de -1.

Armamos una funci\'on (\texttt{zombiesCuadra}) la cual nos devuelve en $O(1)$ la cantidad de zombies que hay desde una esquina hacia alguna de sus cuatro direcciones. La complejidad Temporal de esta funci\'on es constante porque s\'olo basta con acceder al \'indice de la matriz correspondiente y buscar la posici\'on de la tupla deseada.\\
\\

Para almacenar el grafo que va a contener la soluci\'on (\texttt{grafo}), utilizamos una matriz de vectores (\texttt{cubo}). Esta matriz tiene un taman\~no de $O(s.n.m)$ ya que para cada coordenada pueden existir $s$ cantidad de \texttt{soldadosVivos} distintas para llegar hasta all\'i.

Si bien, no necesariamente vayamos a completar la matriz completa, debemos considerar el peor caso que es cuando esto s\'i sucede.\\

Por lo detallado anteriormente, nuestro \texttt{grafo} tiene, a lo sumo, $s.n.m$ nodos. Sabiendo esto, podemos justificar que la guarda del while va a ejecutar  $\mathbf{O(s.n.m)}$ ya que cada nodo visitado se va a marcar y no se va a recorrer dos veces el mismo nodo.

La complejidad del ciclo del While podemos afirmar que es $\mathbf{O(1)}$. Las operaciones que se ejecutan son: de acceso a una matriz (ya sea \texttt{ciudadInfestada} o \texttt{grafo}) asignando o leyendo, en ambos casos con complejidad $O(1)$; operaciones elementales ($O(1)$) y operaciones de cola en un queue (
\href{http://www.cplusplus.com/reference/queue/queue/push/}{push()} \footnote{http://www.cplusplus.com/reference/queue/queue/push/}, 
\href{http://www.cplusplus.com/reference/queue/queue/pop/}{pop()} \footnote{http://www.cplusplus.com/reference/queue/queue/pop/} y 
\href{http://www.cplusplus.com/reference/queue/queue/front/}{front()} \footnote{http://www.cplusplus.com/reference/queue/queue/front/}
) las cuales poseen todas complejidad constante.\\

\bigskip

Por lo tanto, la complejidad Temporal del algoritmo es de $O(s.n.m)*O(1)$, lo que por propiedas de $O$ equivale a $\mathbf{O(s.n.m)}$ tal que concuerda con la complejidad exigida.

\newpage

\subsection{C\'odigo fuente}
	\begin{codesnippet}
	\begin{verbatim}
    struct posYsold {
        int soldadosVivos;
        int i;
        int j;
    };
	\end{verbatim}
	\end{codesnippet}

	\begin{codesnippet}
	\begin{verbatim}
    Matriz ciudadInfestada;
    unsigned int n, m;
    
    int main(int argc, char const *argv[]){
        unsigned int s;
        cin >> n >> m >> s;
        unsigned int inicioH, inicioV, bunkerH, bunkerV;
        cin >> inicioH >> inicioV >> bunkerH >> bunkerV;
        inicioV--;
        inicioH--;
        bunkerV--;
        bunkerH--;
    //la matriz de la ciudad guarda cuantos zombies tiene el eje para moverse
    // a la derecha y hacia abajo (en ese orden)
    //para la izquierda es ir al de la izquierda y preguntar por el derecho
    //para arriba es ir al de arriba y preguntar por el de abajo
        ciudadInfestada = Matriz(n, vector<pair<int, int> >(m));
        for (int i = 0; i < n-1; ++i) {
            for (int j = 0; j < m-1; ++j) {
                cin >> ciudadInfestada[i][j].first;
            }
    //no hay camino a la derecha
            ciudadInfestada[i][m-1].first = -1;
            for (int j = 0; j < m; ++j) {
                cin >> ciudadInfestada[i][j].second;
            }
        }
        for (int j = 0; j < m-1; ++j) {
            cin >> ciudadInfestada[n-1][j].first;
    //no hay camino hacia abajo
            ciudadInfestada[n-1][j].second = -1;
        }
    //no hay camino a la derecha ni abajo
        ciudadInfestada[n-1][m-1].first = -1;
        ciudadInfestada[n-1][m-1].second = -1;
    //creamos el cubo a completar
        Cubo grafo(n, vector<vector<pair<posYsold, bool> > >(m));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                grafo[i][j] = vector<pair<posYsold, bool> >(s+1);
            }
        }
    //aplicamos el algoritmo
        int soldadosVivos = zombieland(grafo, inicioH, inicioV, bunkerH, bunkerV, s);
	\end{verbatim}
	\end{codesnippet}

	\begin{codesnippet}
	\begin{verbatim}
    //cout pedido
        cout << soldadosVivos << endl;
        deque<posYsold> recorrido;
    //para armarlo desde el principio hasta el final
        if(soldadosVivos != 0){
            posYsold posActual;
            posActual.soldadosVivos = soldadosVivos;
            posActual.i = bunkerH;
            posActual.j = bunkerV;
            while(posActual.i != inicioH || posActual.j != inicioV){
                recorrido.push_front(posActual);
                posActual = grafo[posActual.i][posActual.j][posActual.soldadosVivos].first;
            }
            posActual.soldadosVivos = s;
            posActual.i = inicioH;
            posActual.j = inicioV;
            recorrido.push_front(posActual);
        }
        for (int i = 0; i < recorrido.size(); ++i) {
            cout << recorrido[i].i+1 << " " << recorrido[i].j+1 << endl;
        }
        return 0;
    }
	\end{verbatim}
	\end{codesnippet}

	\begin{codesnippet}
	\begin{verbatim}
    int zombieland(Cubo& grafo, int inicioH, int inicioV, int bunkerH, int bunkerV, int soldados){
        int maxSoldados = 0;
    //cola para el BFS arranca con la posicion de donde salimos
        queue<posYsold> cola;
        posYsold actual;
        actual.soldadosVivos = soldados;
        actual.i = inicioH;
        actual.j = inicioV;
        cola.push(actual);
    //se marca esta posicion como visitada
        grafo[inicioH][inicioV][soldados].second = true;
        int zombies;
        int resultadoBatalla;
    //mientras tengamos algo para visitar (no sabemos si llegaremos al final)
        while(cola.size() > 0){
    //actual es el primero de la cola
            actual = cola.front();
        //si no estamos el final vemos si podemos ir a cada una de las cuatro direcciones
        //si es valido, no se mueren todos los soldados y no visite ese nodo, 
        //agregare el siguiente nodo a visitar
        //si ya lo visite, existe un camino que me lleva hasta ahi, 
        //ya fue encolado el camino que le sigue
            if(!(actual.i == bunkerH && actual.j == bunkerV)){
                zombies = zombiesCuadra(actual.i, actual.j, ARRIBA);
                resultadoBatalla = resulBatalla(actual.soldadosVivos, zombies);
                if(zombies != -1 && resultadoBatalla > 0 && !grafo[actual.i-1][actual.j]
                [resultadoBatalla].second){
                    posYsold arriba;
                    arriba.soldadosVivos = resultadoBatalla;
                    arriba.i = actual.i-1;
                    arriba.j = actual.j;
                    cola.push(arriba);
                    grafo[actual.i-1][actual.j][resultadoBatalla].second = true;
                    grafo[actual.i-1][actual.j][resultadoBatalla].first = actual;
                }
                zombies = zombiesCuadra(actual.i, actual.j, DER);
                resultadoBatalla = resulBatalla(actual.soldadosVivos, zombies);
                if(zombies != -1 && resultadoBatalla > 0 && !grafo[actual.i][actual.j+1]
                [resultadoBatalla].second){
                    posYsold der;
                    der.soldadosVivos = resultadoBatalla;
                    der.i = actual.i;
                    der.j = actual.j+1;
                    cola.push(der);
                    grafo[actual.i][actual.j+1][resultadoBatalla].second = true;
                    grafo[actual.i][actual.j+1][resultadoBatalla].first = actual;
                }
	\end{verbatim}
	\end{codesnippet}

	\begin{codesnippet}
	\begin{verbatim}
                zombies = zombiesCuadra(actual.i, actual.j, ABAJO);
                resultadoBatalla = resulBatalla(actual.soldadosVivos, zombies);
                if(zombies != -1 && resultadoBatalla > 0 && !grafo[actual.i+1][actual.j]
                [resultadoBatalla].second){
                    posYsold abajo;
                    abajo.soldadosVivos = resultadoBatalla;
                    abajo.i = actual.i+1;
                    abajo.j = actual.j;
                    cola.push(abajo);
                    grafo[actual.i+1][actual.j][resultadoBatalla].second = true;
                    grafo[actual.i+1][actual.j][resultadoBatalla].first = actual;
                }
                zombies = zombiesCuadra(actual.i, actual.j, IZQ);
                resultadoBatalla = resulBatalla(actual.soldadosVivos, zombies);
                if(zombies != -1 && resultadoBatalla > 0 && !grafo[actual.i][actual.j-1]
                [resultadoBatalla].second){
                    posYsold izq;
                    izq.soldadosVivos = resultadoBatalla;
                    izq.i = actual.i;
                    izq.j = actual.j-1;
                    cola.push(izq);
                    grafo[actual.i][actual.j-1][resultadoBatalla].second = true;
                    grafo[actual.i][actual.j-1][resultadoBatalla].first = actual;
                }
            }
        //si llegamos al final, actualizamos los soldados que quedaron vivos, 
        //si es mayor a haber llegado por otro camino
            else
                if(maxSoldados < actual.soldadosVivos)
                    maxSoldados = actual.soldadosVivos;
        //desencolo el nodo que estaba analizando
            cola.pop();
        }
        return maxSoldados;
    }
	\end{verbatim}
	\end{codesnippet}

	\begin{codesnippet}
	\begin{verbatim}
    int zombiesCuadra(int i, int j, movimiento mov){
    //devuelve los zombies que en la cuadra pedida
        switch(mov){
            case ARRIBA:
                if(i == 0)
                    return -1;
                return ciudadInfestada[i-1][j].second;
            case ABAJO:
                return ciudadInfestada[i][j].second;
            case IZQ:
                if(j == 0)
                    return -1;
                return ciudadInfestada[i][j-1].first;
            case DER:
                return ciudadInfestada[i][j].first;
        }
    }
	\end{verbatim}
	\end{codesnippet}

	\begin{codesnippet}
	\begin{verbatim}
    int resulBatalla(int sold, int zomb){
    //devuelve si es posible pasar por una cuadra
        if(sold>=zomb)
            return sold;
        return sold-(zomb-sold); 
    }
	\end{verbatim}
	\end{codesnippet}

\newpage

\subsection{Experimentaci\'on}
\subsubsection{Constrastaci\'on Emp\'irica de la complejidad}

Al momento de llevar a cabo la experimentaci\'on, se consideró como\emph{ peor caso}, aquel en el que se debiera recorrer cada nodo de la ciudad (\texttt{grafo}), tantas veces como cantidad de soldados se tuviese a disposici\'on en el momento inicial. Es decir, pasar por cada esquina de la ciudad $s$ veces, cada vez con una cantidad diferente de \texttt{soldadosVivos}. Siendo ese caso, en el que se recorren $s.n.m$ elementos, coincidiendo así con la complejidad teórica $\mathbf{O(s.n.m)}$.\\

Aunque este ser\'ia el caso deseable, generar dicha instancia para los distintos valores de $s$, $n$ y $m$, resultó tan dificultoso como resolver el problema en cuestión. Por este motivo, se decidi\'o generar instancias con una cantidad aleatoria de zombies por cuadra.

Primero analizaremos con detalle estas instancias, y luego expondremos porque decidimos usarlas.\\


Asumiendo que la posici\'on inicial es la de la esquina superior izquierda y la final la de la esquina inferior derecha, al ejecutar el generador de instancias aleatorias se obtiene un diagrama similar al siguiente:


\begin{center}
\includegraphics[width=7cm,keepaspectratio=yes]{imagenes/ej2/maze.png}
\end{center}

Donde los pasajes del laberinto representan caminos donde hay entre $0$ y $S+1$ zombies por cuadra, y las paredes, caminos donde hay entre $0$ y $2.S$ zombies por cuadra.\\

Vale aclarar, que las paredes no necesariamente constituyen un medio por el cual los soldados no puedan pasar, sino un medio donde lograrlo es poco probable. Los pasajes, de modo similar, no necesariamente constituyen un medio por el cual los soldados siempre pueden pasar, sino un medio donde tener bajas, es poco probable.

Estos valores aleatorios fueron tomados adrede, por un lado, para que incluso el mejor camino (alguno de los pasajes que conducen a la salida), tuviera p\'erdida de soldados, pero intentando que éstas sean mínimas, para aumentar las probabilidades de que puedan efectivamente llegar al búnker.\\
\bigskip

Aún asi, el $s$ tomado en el algoritmo aleatorio es el que se recibe en la entrada. Esto significa, que se configura al principio, y no se actualiza con la cantidad de soldados despu\'es de una batalla.

Por ende, no podemos determinar el porcentaje de soldados totales que llegarán, pero sí podemos saber el porcentaje que sobrevivirá a la primer batalla, en el peor de los casos.

\newpage

Así, la cantidad de soldados que sobrevivir\'an a la primer batalla, en el \emph{peor caso}, es:

\begin{itemize}
	\item Si toma un pasaje, en el peor de los casos, sobrevivirá el 50\% de los soldados (casos en el que hay 1 soldado y 2 zombies). No obstante, ese porcentaje tiende a 100\% a medida que la cantidad de soldados aumenta.
	\item Si toma una pared, solo sobrevivirá un 50\%, sin importar la cantidad de soldados.
\end{itemize}

Estos rangos aleatorios se obtuvieron experimentando con distintas distribuciones de zombies, hasta lograr valores que ocasionaran bajas pero que no impidieran a los soldados llegar al búnker en la mayoría de los casos. Dichos experimentos exceden el interés de esta sección y no serán discutidos.\\
\\
\bigskip

Al proceder bajo este m\'etodo fue posible efectuar casos de prueba de gran tamaño. Sin embargo, debido a la dimensi\'on de los casos de tests, hay ciertos aspectos de la soluci\'on del problema que no podemos determinar por nuestra cuenta para contrastar con la soluci\'on propuesta por el algoritmo:

\begin{enumerate}
	\item No se puede determinar si existe un camino desde el punto de inicio ($X_i$) hasta el búnker ($X_f$).
	\item No se puede determinar, si al existir un camino, este será único. 
	\item No se puede determinar cu\'antos soldados van a llegar al búnker.
	\item No se puede determinar cu\'antos caminos adulteran la cantidad de soldados, ni cu\'antos soldados mueren en cada uno de ellos.
\end{enumerate}

\bigskip
\bigskip


Finalmente, y pese a las dificultades expuestas, se decidió proceder con dichas instancias, tom\'andose s\'olo aquellas donde se pudo asegurar que existía un camino al búnker, y que existía un camino donde hubiera al menos una baja (no necesariamente, estos dos sean el mismo camino), ya que lograban generar una fluctuación en la cantidad de soldados, y esto, si bien lejos del peor caso propuesto, resultó ser una aproximación que consideramos suficiente.

Para obtenerlas, se generaron instancias hasta obtener una que tuviera dichas características.\\

Consecuentemente, se realizaron experimentos sobre los siguientes dos casos:
\begin{itemize}
	\item \textbf{Cero zombies}: En esta instancia, la cantidad de zombies en cada cuadra es cero, con lo cual, el algoritmo recorre toda la ciudad, y se queda con cualquier camino.
	\item \textbf{Zombies aleatorios}: Es la instancia explicada anteriormente.
\end{itemize}

También es necesario aclarar, que los experimentos se realizaron sobre ciudades cuadradas, con puntos de inicio y llegada en los extremos opuestos de la ciudad, y con cantidad de soldados iniciales igual a 20. 

Tomamos esta decision porque los casos de ciudades cuadradas y de ciudades rectangulares, son análogos, dado que lo importante es la cantidad de cuadras en total. En lo que respecta a los puntos de partida y llegada, fueron elegidos para aprovechar al maximo la dimensi\'on de la ciudad y obtener el más largo de los caminos posibles.\\

\newpage

A continuación se detallan los experimentos y sus resultados.
Debido al tamaño de las instancias de prueba, los inputs de dichos experimentos no fueron adjuntados.
\begin{center}
	\begin{tabular}{|c|c|c|}
	\hline
	Experimento & \textbf{Cero zombies} & \textbf{Zombies aleatorios}\\
	\hline
	\hline
	Tamaño de la ciudad & \multicolumn{2}{|c|}{Soldados al final}\\
	\hline
	50x50 & 20 & 6\\
	\hline
	100x100 & 20 & 19\\
	\hline
	250x250 & 20 & 17\\
	\hline
	500x500 & 20 & 17\\
	\hline
	750x750 & 20 & 16\\
	\hline
	1000x1000 & 20 & 12\\
	\hline
	1250x1250 & 20 & 20\\
	\hline
	1500x1500 & 20 & 7\\
	\hline
	1750x1750 & 20 & 14\\
	\hline
	2000x2000 & 20 & 20\\
	\hline
	\end{tabular}
\end{center}



\subsubsection*{Cero Zombies}

Dado que los tiempos de ejecución para ambos experimentos varían ampliamente, primero analizaremos el experimento de \textbf{Cero zombies}.

\includegraphics[width=15cm,keepaspectratio=yes]{imagenes/ej2/czneto.png}

Como se puede apreciar, al no haber zombies, no existe ningun camino en el cual mueran soldados, por lo que los tiempos se incrementan acorde a la dimension de la ciudad, y al ser cuadradas, posee un crecimiento cuadrático. Más adelante justificaremos por qué pensamos que el gráfico es una función cuadrática y no de un grado mayor.

\newpage

\subsubsection*{Cero Zombies vs Zombies Aleatorios}

\includegraphics[width=15cm,keepaspectratio=yes]{imagenes/ej2/czyza.png}

Aquí se pueden apreciar las diferencias de tiempos. Ésta radica en el hecho de que \textbf{Zombies aleatorios} posee caminos en los cuales los soldados mueren. Por ello, el algoritmo deberá recorrer, en peor caso, $s$ veces la ciudad entera. En cambio, en el caso de \textbf{Cero Zombies} s\'olo arma una ``capa'' de la ciudad, es decir todos los nodos para las esquinas de la ciudad pero siempre \texttt{soldadosVivos}$=0$. \\

\newpage
Se procedió, entonces, a dividir los resultados de \textbf{Zombies aleatorios} por la cantidad de soldados iniciales con los que se ejecutó el algoritmo a fin de que quede reflejado, que en ese caso, los tiempos serán muy similares a los de \textbf{Cero zombies}. Esto se debe a que ya no son los tiempos de recorrer $s$ veces la ciudad, sino de recorrerla una sola vez y por ende, debe ser una función cuadrática.

Sin embargo, es necesario aclarar que la similitud que se intenta mostrar, es aproximada, ya que no podemos asegurar que efectivamente, el algoritmo recorre $s$ veces la ciudad. Tal es el peor caso, y como hemos expuesto en un principio, no podemos asegurar que sea el que realmente ocurre.

\includegraphics[width=15cm,keepaspectratio=yes]{imagenes/ej2/zaczados.png}

Tal como era esperado, en este grafico se muestran dos funciones cuadráticas, que como se explico anteriormente, solo difieren en la constante que las multiplica.

\newpage

Manteniendo los resultados de \textbf{Zombies aleatorios} divididos por $s$, finalmente dividimos los resultados tanto de \textbf{Cero zombies} como de \textbf{Zombies aleatorios}, por $n$, y en una instancia aparte, por $n.m$.

De esta manera, dado que en ambos tienen $s$ igual a 1, solo queda ver que al dividir por $n$, los resultados se aproximan a una función lineal, y que al dividirlos por $n.m$, se aproximan a una constante.\\

Como s\'olo nos interesa la relación, y no la función exacta ni la constante, multiplicamos los resultados de dichas divisiones por 100, para que los valores sean más claros y visibles.\\
\\

El gr\'afico siguiente corresponde a los tiempos de ejecuci\'on divididos por $s.n$ en el caso de \textbf{Zombies aleatorios}  y por $n$ en el caso de \textbf{Cero zombies}.

\includegraphics[width=15cm,keepaspectratio=yes]{imagenes/ej2/linealizacion.png}

Como se puede apreciar, el gráfico ahora muestra una función lineal, con lo cuál se inclina a demostrar que en el primer gráfico, la función representada era una función cuadrática.
Sin embargo, volveremos a realizar la división para asegurarnos que ésta función, es realmente una función lineal.

\newpage

El gr\'afico siguiente corresponde a los tiempos de ejecuci\'on divididos por $s.n.m$ en el caso de \textbf{Zombies aleatorios}  y por $n.m$ en el caso de \textbf{Cero zombies}.

\includegraphics[width=15cm,keepaspectratio=yes]{imagenes/ej2/constantizacion.png}\

Efectivamente, el resultado de la división es una constante, y con esto se muestra que la primer función graficada, correspondía a una función cuadrática.

\bigskip

Se puede ver que la experimentación se corresponde con la teoría, y que la complejidad, en peor caso, es $\mathbf{O(s.n.m)}$.

